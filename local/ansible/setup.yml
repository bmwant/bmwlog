---
- hosts: all
  gather_facts: no

  tasks:
    - include_vars: "vars/common.yml"

    # hack to allow run via 'ansible-playbook' and via 'vagrant provision'
    - include_vars: "group_vars/vagrant.yml"
      when: ansible_ssh_user == "vagrant"

    - name: create directories
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - "/usr/local/etc/nginx/sites-enabled/"
        - "/usr/local/etc/supervisor/"
      become: true

    - name: install packages
      pkgng: name="{{ item }}" state=present
      with_items:
        - git
        - py27-pip
        - py27-virtualenv
        - py27-supervisor
        - nginx
        - mysql56-server
      become: true

    - name: enable supervisor at startup
      lineinfile:
        dest: /etc/rc.conf
        line: 'supervisord_enable="YES"'
      become: true

    # the default will replace the remote file when contents are different than the source
    - name: modify supervisor config
      copy:
        src: files/supervisord.conf
        dest: /usr/local/etc/supervisord.conf
      become: true

    - name: start supervisor
      service:
        name: supervisord
        state: started
      become: true

    - name: enable mysql at startup
      lineinfile:
        dest: /etc/rc.conf
        line: 'mysql_enable="YES"'
      become: true

    - name: start mysql
      service:
        name: mysql-server
        state: started
      become: true

    - name: create mysql database
      command: 'mysql -u root -e "create database if not exists {{ database_name }}";'

    - name: enable nginx at startup
      lineinfile:
        dest: /etc/rc.conf
        line: 'nginx_enable="YES"'
      become: true

    - name: start nginx
      service:
        name: nginx
        state: started
      become: true

    - name: clone bmwlog repository
      git:
        repo: "{{ repository_url }}"
        dest: "{{ project_root }}"
        version: "{{ repository_branch }}"
        accept_hostkey: true
      when: ansible_ssh_user != "vagrant"

    - name: create local directories for project
      file:
        path: "{{ project_root }}/{{ item }}"
        state: directory
      with_items:
        - "prod"
        - "uploaded"

    - name: create virtual environment
      shell: "virtualenv {{ project_venv }}"
      args:
        creates: "{{ project_venv }}"

    - name: install requirements
      shell: "{{ project_venv }}/bin/pip install -r requirements.txt"
      args:
        chdir: "{{ project_root }}"

    - name: modify nginx config
      copy:
        src: files/nginx.conf
        dest: /usr/local/etc/nginx/nginx.conf
      notify: nginx reload
      become: true

    - name: create nginx config for project
      template:
        src: "templates/nginx_bmwlog.conf.j2"
        dest: "{{ project_root }}/prod/nginx_bmwlog.conf"

    - name: create symlink to nginx config
      file:
        src: "{{ project_root }}/prod/nginx_bmwlog.conf"
        dest: /usr/local/etc/nginx/sites-enabled/bmwlog.conf
        state: link
      notify: nginx reload
      become: true


  handlers:

    - name: nginx reload
      shell: "nginx -t && nginx -s reload"
      become: true
